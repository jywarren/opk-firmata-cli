#!/usr/bin/env node

var program = require('commander');
var firmata = require('firmata');

// set up CLI flags
// Later, maybe add: "Detect the path by running the detect command."
program
  .version('0.0.1')
  .option('-p, --path <path>', "Set a path to the Shinyei device's Arduino-based USB interface, default /dev/ttyACM0", '/dev/ttyACM0')
  .option('-i, --interval <milliseconds>', 'Set a detection interval; how often, in milliseconds, to read high or low from the Shinyei; default 10', 10)
  .option('-s, --summing <seconds>', 'Set a summing interval; how often, in seconds, to sum highs and lows and report a percentage; default 30', 30)
  .option('-1, --pin1 <pin>', "Set a digital pin # for the Arduino to communicate with the Shinyei device's P1 sensor; default pin 8", 8)
  .option('-2, --pin2 <pin>', "Set a digital pin # for the Arduino to communicate with the Shinyei device's P2 sensor; default pin 9", 9)
  .option('-v, --verbose', 'Turn on verbose mode')
  .option('-j, --json', 'Return JSON output')
  .parse(process.argv);

var log = function(msg) {
  if (program.verbose) {
    console.log(msg);
  }
}

var pin1hi     = 0, 
    pin1lo     = 0,
    pin2hi     = 0, 
    pin2lo     = 0,
    detections = 0;

var pin1callback = function(value) {
  log(value);
  if (value == 0) {
    pin1lo += 1;
  } else if (value == 1) {
    pin1hi += 1;
  } 
  detections += 1;
}

var pin2callback = function(value) {
  log(value);
  if (value == 0) {
    pin2lo += 1;
  } else if (value == 1) {
    pin2hi += 1;
  } 
}

board = new firmata.Board(program.path)
board.on('ready',function(){
  //arduino is ready to communicate

  this.pinMode(program.pin1, this.MODES.INPUT);
  this.pinMode(program.pin2, this.MODES.INPUT);

  setInterval(function() {
    // Read a digital value from the pin. Evertime there is data for the pin the callback will be fired with a value argument.
    board.digitalRead(program.pin1,pin1callback);
    board.digitalRead(program.pin2,pin2callback);
  },program.interval);

  setInterval(function() {
    // report percentage low for each pin:
    var p1lowpercent = parseFloat(pin1lo/(pin1hi+pin1lo)),
        p2lowpercent = parseFloat(pin2lo/(pin2hi+pin2lo));

    if (program.json) {
      console.log("{'p1lowpercent':"+p1lowpercent
                 +",'p2lowpercent':"+p2lowpercent+"}")
    } else {
      console.log(p1lowpercent+","+p2lowpercent+", detections:"+detections)
    }

    // reset counters
    pin1hi = 0;
    pin1lo = 0;
    pin2hi = 0;
    pin2lo = 0;
    detections = 0;

  },program.summing*1000);

});
 
